[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "autodoc-agent"
version = "0.1.0"
description = "智能代码文档生成工具，支持多种编程语言和LLM集成"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AutoDoc Agent Team", email = "team@autodoc-agent.com"}
]
keywords = ["documentation", "code-generation", "llm", "ast-parser", "cli"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "libcst>=1.1.0",
    "astroid>=3.0.0",
    "tree-sitter>=0.20.4",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "requests>=2.31.0",
    "pyyaml>=6.0",
    "jinja2>=3.1.0",
    "keyring>=24.0.0",
    "gitpython>=3.1.0",
    "pydantic>=2.0.0",
    "tenacity>=8.2.0",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.scripts]
autodoc = "src.cli:app"

[project.urls]
Homepage = "https://github.com/autodoc-agent/autodoc-agent"
Documentation = "https://autodoc-agent.readthedocs.io"
Repository = "https://github.com/autodoc-agent/autodoc-agent"
Issues = "https://github.com/autodoc-agent/autodoc-agent/issues"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "libcst.*",
    "astroid.*",
    "tree_sitter.*",
    "openai.*",
    "anthropic.*",
    "keyring.*",
    "git.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
] 